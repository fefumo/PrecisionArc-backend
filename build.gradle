import org.xml.sax.helpers.DefaultHandler

import javax.xml.parsers.DocumentBuilderFactory
import java.security.MessageDigest

plugins {
    id 'java'
    id 'war'
}

group = 'se.ifmo'
version = '1.0-SNAPSHOT'
//its better to use this:
/*
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
*/
//but i dont wanna install java 17 for it 
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    // Jersey
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.0.0'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.0.0'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:3.0.0'

    // Jakarta EE
    providedCompile 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
    providedCompile 'jakarta.ejb:jakarta.ejb-api:4.0.1'

    // Hibernate
    implementation 'org.hibernate.orm:hibernate-core:6.3.1.Final'

    // PostgreSQL
    implementation 'org.postgresql:postgresql:42.6.0'

    // Hashing
    implementation 'org.mindrot:jbcrypt:0.4'

    // JWT
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.16'

    // javax.xml.parsers, org.w3c.dom
    implementation 'xml-apis:xml-apis:1.4.01'
}

def srcDir = file('src/main/java')
ext.compileSucceeded = true

tasks.register('compile') {
    description = 'Compile .java files'
    group = 'CS lab'

    def outDir = file('build/classes/java/main')

    inputs.dir(srcDir)
    outputs.dir(outDir)

    doLast {
        try {
            outDir.mkdirs()
            def javaFiles = fileTree(srcDir).matching { include '**/*.java' }.files.collect { it.path }

            if (javaFiles.isEmpty()) {
                throw new GradleException("There are no .java files to compile")
            }

            def classpath = configurations.compileClasspath.files.join(File.pathSeparator)
            def command = ['javac', '-d', outDir.path]

            if (classpath) {
                command += ['-cp', classpath]
            }

            command += javaFiles

            println "Running: ${command.join(' ')}"
            def result = exec {
                commandLine command
                ignoreExitValue = true
            }

            copy {
                from 'src/main/resources'
                into 'build/resources/main'
            }

            if (result.exitValue == 0) {
                println "Compilation succeeded"
                compileSucceeded = true
            } else {
                println "Compilation failed"
                compileSucceeded = false
            }
        } catch (Exception e) {
            println "Error while the compile task: ${e.message}"
            buildSucceeded = false
        }

    }
}

// No main class, this is just a class container
tasks.register('myBuild') {
    description = 'Package classes into a plain JAR (non-executable).'
    group = 'CS lab'

    dependsOn compile

    doLast {
        def jarFile = file('build/libs/OPILab3.jar')
        def classesFiles = file('build/classes')
        def manifest = file('build/tmp/jar/MANIFEST.MF')

        jarFile.parentFile.mkdirs()

        if (!manifest.exists()) {
            manifest.parentFile.mkdirs()
            manifest.text = "Manifest-Version: 1.0\n"
        }

        def command = [
                'jar', 'cmf', manifest.absolutePath, jarFile.absolutePath,
                '-C', classesFiles.absolutePath, '.'
        ]

        println "Executing ${command.join(' ')}"
        exec {
            commandLine command
        }
        println "JAR-file ${jarFile} has been successfully built"
    }
    // finalizedBy runTests
}
// tasks.register('buildJar') {
//     group = 'CS lab'
//     description = 'Package classes into a plain JAR.'

//     dependsOn 'compile'

//     doLast {
//         def jar = tasks.create('customJar', Jar) {
//             archiveBaseName.set('app')
//             archiveVersion.set(version)
//             from sourceSets.main.output
//             manifest {
//                 attributes(
//                     'Main-Class': 'se.ifmo.Main'
//                 )
//             }
//         }
//         jar.execute()
//     }
// }

tasks.register('myClean') {
    description = 'Remove \'build\' directory'
    group = 'CS lab'

    doLast {
        def buildDir = file('build')

        if (buildDir.exists()) {
            println "Removing ${buildDir} directory..."
            buildDir.deleteDir()
        } else {
            println '\'build\' directory not found'
        }
    }
}

tasks.register('xml') {
    description = 'Validates all project\'s .xml files'
    group = 'CS lab'

    doLast {
        def xmlFiles = fileTree('src/main/resources') {
            include '**/*.xml'
        }

        def factory = DocumentBuilderFactory.newInstance()
        factory.setValidating(false)

        def builder = factory.newDocumentBuilder()
        builder.setErrorHandler(new DefaultHandler())

        xmlFiles.each {
            try {
                builder.parse(it)
                println "File ${it} is valid"
            } catch (Exception e) {
                println "Error in file ${it}: ${e.message}"
            }
        }
    }
}


war {
    archiveFileName = 'PrecisionArc.war'
}
